The 'Memoization' Template is different from the classical Backtracking Template
The main differences between this and the previous template are:
1. No path and push/pop since we don't need to actually generate the solutions. We just need the aggregated value.
2. Use return value to aggregate results from child dfs calls.

Depending on what the problem asks for, the initial_value and aggregate function here can be

PROBLEM STATEMENT	                INITIAL VALUE	AGGREGATE
If it's possible? does it exist?	boolean value	logical OR (||)
Number of ways to...	            0	            addition (+)
Maximum/minimum ways/value to...	0, inf	        max/min



function dfs(start_index, [...additional states]):
    if is_leaf(start_index):
        return 1
    ans = initial_value
    for edge in get_edges(start_index, [...additional states]):
        if additional states:
            update([...additional states])
        ans = aggregate(ans, dfs(start_index + len(edge), [...additional states]))
        if additional states:
            revert([...additional states])
    return ans



